NODE_ENV = development
# DB_HOST = YOUR_DB_HOST
# DB_USER = YOUR_DB_USER
# DB_PASSWORD = YOUR_DB_PASSWORD
# DB_DATABASE = YOUR_DB_DATABASE
# EXPRESS_PORT = 3000 ## or any port you want that doesnt interfer other services or your production
# JWT_KEY = SECRETKEY
MQTT_PROTOCOL = PROTOCOL_IN_USE ##[mqtt || mqtts || ws || wss]
MQTT_PORT = YOUR_MQTT_SERVER_PORT ##set the port assigned for the mosquitto broker
MQTT_HOST = YOUR_SERVER_IP_OR_DOMAIN ##IP assigned on your server where mosquitto broker is running
MQTT_USER = YOUR_MQTT_USER ##if you have one [username and password on mqtt broker are opcional]
MQTT_PASS = YOUR_MQTT_PASSWORD 
MQTT_TOPIC_SUBSCRIBER = /YOUR/ASSIGNED/SUBSCRIBE_TOPIC ## where the data will be received by any other mqtt client
MQTT_TOPIC_PUBLISHER = /YOUR/ASSIGNED/PUBLISH_TOPIC ## where the data will be published
    # MQTT Quality of Service (QoS) Levels:
    
    # QoS 0 (At most once):
    #   - Fire and Forget.
    #   - No confirmation or delivery retry mechanism is performed.
    #   - No guarantee of message delivery to the subscriber.

    # QoS 1 (At least once):
    #   - Ensures that each message is delivered to the subscriber at least once.
    #   - Messages are temporarily stored in a buffer on the broker and retried until a confirmation of receipt (ACK) is received.
    #   - Duplicate deliveries may occur if multiple ACKs are received.

    # QoS 2 (Exactly once):
    #   - Provides the highest guarantee of delivery.
    #   - Involves a four-step exchange between the publisher, broker, and subscriber.
    #   - Ensures exact and ordered delivery of messages.
    #   - Higher network overhead compared to QoS 0 and QoS 1.

    # The QoS level should be configured both on the publisher and subscriber side to ensure consistency in MQTT message delivery.
MQTT_QOS = ZERO_ONE_TWO
##In this case, a ws client works as a mqtt client, taking the role of a broker between mqtt server and ws clients generated by the webapp 
WS_BROKERID = YOUR_WSCLIENT_IDENTIFIER